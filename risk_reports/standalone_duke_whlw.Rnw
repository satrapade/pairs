\documentclass{article}


<<,cache=FALSE, eval=TRUE, echo=FALSE, message=FALSE, warning=FALSE, results="hide">>=

x<-list.files(
  path="figure",
  pattern="*.pdf",
  full.names=TRUE
)
if(length(x)>0)file.remove(x)

source("https://raw.githubusercontent.com/satrapade/latex_utils/master/latex_helpers_v2.R")

@


\usepackage[portrait, headheight = 0cm, margin=0.25cm, top = 0.25cm, nofoot]{geometry} 
\usepackage[export]{adjustbox} 
\usepackage[space]{grffile}
\usepackage{graphicx}
\usepackage[dvipsnames,table]{xcolor} % [dvipsnames,table] for setting colors \usepackage{amsmath} \usepackage{xfrac}
\usepackage{tikz}
\usetikzlibrary{shapes.geometric}
\usetikzlibrary{shapes.misc}
%\usetikzlibrary{external}
%\tikzexternalize % activate!
%\usepackage{sparklines}
\usepackage{xfrac}
\usepackage{sparklines}
\usepackage{xfrac}
\usepackage{hyperref}
\usepackage{amsmath, amsthm, amssymb, amsfonts}
\usepackage{listings}
\lstset{language=R} 

\DeclareRobustCommand\Tstrut{\rule{0pt}{2.6ex}}         % = `top' strut
\DeclareRobustCommand\Bstrut{\rule[-0.9ex]{0pt}{0pt}}   % = `bottom' strut
\renewcommand{\familydefault}{\sfdefault}

\begin{document}

<<,cache=FALSE, eval=TRUE, echo=FALSE, message=FALSE, warning=FALSE, results="hide">>=
#
# fetch sheet positions, take 2
#
require(R.cache)
require(stringi)
require(data.table)
require(Matrix)
require(readxl)
require(ggplot2)
require(magrittr)
library(Rblpapi)
require(FRAPO)
require(scales)

rcon<-Rblpapi::blpConnect()

#
replace_zero_with_last<-function(x,a=x!=0)x[which(a)[c(1,1:sum(a))][cumsum(a)+1]]

#
scrub<-function(x)
{
  if(length(x)==0)return(0)
  x[which(!is.finite(x))]<-0
  x
}

make_date_range<-function(
  start="2017-06-01",
  end="2017-06-30",
  leading_days=0,
  trailing_days=0
){
  fmt="%Y-%m-%d"
  date_seq<-seq(from=as.Date(start,format=fmt)-leading_days,to=as.Date(end,format=fmt)+trailing_days,by=1)
  as.character(date_seq,format=fmt)
}

#
ticker_class<-function(x)
{
  
  x_trim<-stri_trim(x)
  x_upper<-toupper(x_trim)
  x_lower<-tolower(x_trim)
  
  all_matches<-list(
    list(class="date",match=grepl("^[0-9]{4}-[0-9]{2}-[0-9]{2}$",x_trim)),
    list(class="equity",match=grepl("^[A-Z0-9/]+\\s+[A-Z]{2,2}$",x_trim)),
    list(class="equity",match=grepl("^[A-Z0-9/]+\\s+[A-Z]{2,2}\\sEquity$",x_trim)),
    list(class="equity",match=grepl("^[a-z0-9/]+\\s+[a-z]{2,2}\\sequity$",x_lower)),
    list(class="index",match=grepl("^[A-Z0-9]{3,20}$",x_trim)),
    list(class="index",match=grepl("^[A-Z0-9]{3,20}\\sIndex$",x_trim)),
    list(class="cix",match=grepl("^\\.[A-Z0-9]{3,20}\\sIndex$",x_trim)),
    list(class="index",match=grepl("^[a-z0-9]{3,20}\\sindex$",x_lower)),
    list(class="index",match=grepl("^[A-Z0-9]+\\s+[A-Z]{2}\\s+Index$",x_trim)),
    list(class="future",match=grepl("^([A-Z]{2,4}|[A-Z]\\s)([FGHJKMNQUVXZ]\\d{1,2})$",x_trim)),
    list(class="future",match=grepl("^([A-Z]{2,4}|[A-Z]\\s)([FGHJKMNQUVXZ]\\d{1,2}) Index$",x_trim)),
    list(class="future",match=grepl("^([A-Z]{2,4}|[A-Z]\\s)([FGHJKMNQUVXZ]\\d{1,2})$",x_upper)),
    list(class="future",match=grepl("^([A-Z]{2,4}|[A-Z]\\s)([FGHJKMNQUVXZ]\\d{1,2}) INDEX$",x_upper)),
    list(class="bbgisin",match=grepl("^/isin/[A-Z]{2}[A-Z0-9]{10}$",x_trim)),
    list(class="isin",match=grepl("^[A-Z]{2}[A-Z0-9]{10}$",x_trim)),
    list(
      class="equity_option",
      match=grepl("^[A-Z0-9]{1,10} [A-Z0-9]{2} [0-9]{2}/[0-9]{2}/[0-9]{2} [CP]{1}[\\.0-9]{1,5}$",x_trim)
    ),
    list(
      class="otc_equity_option",
      match=grepl("^OTC-[A-Z0-9]{1,10} [A-Z0-9]{2} [0-9]{2}/[0-9]{2}/[0-9]{2} [CP]{1}[\\.0-9]{1,5}$",x_trim)
    ),
    list(
      class="index_option",
      match=grepl("^[A-Z0-9]{1,10} [0-9]{2}/[0-9]{2}/[0-9]{2} [CP]{1}[\\.0-9]{1,5}$",x_trim)
    ),
    list(
      class="index_option",
      match=grepl("^[A-Z0-9]{1,10} [0-9]{1,2} [CP]{1}[\\.0-9]{1,5}$",x_trim)
    ),
    list(
      class="otc_index_option",
      match=grepl("^OTC-[A-Z0-9]{1,10} [0-9]{2}/[0-9]{2}/[0-9]{2} [CP]{1}[\\.0-9]{1,5}$",x_trim)
    ),
    list(class="forex",match=grepl("^[A-Z]{3,20}\\sCurncy$",x_trim))
  )
  all_classes<-do.call(cbind,mapply(function(m)ifelse(m$match,m$class,"nomatch"),all_matches,SIMPLIFY=FALSE))
  ticker_patterns<-apply(all_classes,1,function(a)paste(sort(unique(a)),collapse="|"))
  
  ticker_patterns
}

#
populate_history_matrix<-function(
  tickers,
  field,
  start,
  end,
  overrides=NULL
){
  all_dates<-as.character(seq(
    min(as.Date(start),as.Date(end)),
    max(as.Date(start),as.Date(end)),
    by=1
  ),format="%Y-%m-%d")
  bbg_res<-Rblpapi::bdh(
    tickers,
    field,
    as.Date(min(all_dates)),
    as.Date(max(all_dates)),
    overrides=overrides
  )
  df<-data.frame(
    ticker=do.call(c,mapply(rep,names(bbg_res),mapply(nrow,bbg_res),SIMPLIFY=FALSE)),
    date=as.character(do.call(c,mapply("[[",bbg_res,MoreArgs=list("date"),SIMPLIFY=FALSE)),format="%Y-%m-%d"),
    value=do.call(c,mapply("[[",bbg_res,MoreArgs=list(field),SIMPLIFY=FALSE)),
    row.names=NULL,
    stringsAsFactors=FALSE
  )
  #return(df)
  m<-sparseMatrix(#
    i=match(df$date,all_dates),
    j=match(df$ticker,tickers),   
    x=df$value,
    dims=c(length(all_dates),length(tickers)),
    dimnames=list(all_dates,tickers)
  )
  return(m)
}


memo_populate_history_matrix<-function(
  ref_matrix=local({
    warning("memo_populate_history_matrix: \"ref_matrix\" argument not supplied, stopping",call.=FALSE)
    stop
  }),
  bbg_field="PX_LAST",
  bbg_overrides=NULL,
  post_fetch_fun=function(x)scrub(as.numeric(x))/100,
  force=FALSE,
  verbose=FALSE
){
  if(any(ticker_class(colnames(ref_matrix))=="nomatch")){
    warning("memo_populate_history_matrix: invalid \"ref_matrix\" argument",call.=FALSE)
    return(NULL)
  }
  the_key<-list(dimnames(ref_matrix),bbg_field,bbg_overrides,"memo_populate_sheet_history_matrix")
  cached_value<-loadCache(key=the_key)
  if(!is.null(cached_value))if(!force){
    if(verbose)warning(
      "memo_populate_history_matrix: using cached value for ",paste(c(bbg_field,bbg_overrides),collapse=", "),".",call.=FALSE
    )
    return(cached_value)
  }
  if(verbose)warning(
    "memo_populate_history_matrix: accessing bloomberg for ",paste(c(bbg_field,bbg_overrides),collapse=", "),".",call.=FALSE
  )
  tickers<-colnames(ref_matrix)
  res<-populate_history_matrix(
    tickers,
    bbg_field,
    min(rownames(ref_matrix)),
    max(rownames(ref_matrix)),
    overrides=bbg_overrides
  )
  cached_value<-apply(res,2,post_fetch_fun)
  dimnames(cached_value)<-dimnames(ref_matrix)
  attributes(cached_value)$bbg_overrides=bbg_overrides
  attributes(cached_value)$bbg_field=bbg_field
  attributes(cached_value)$post_fetch_fun=post_fetch_fun
  saveCache(cached_value,key=the_key)
  cached_value
}

#
NNcast<-function(
  data,
  i_name="date",
  j_name="id",
  v_name="value",
  fun=sum,
  scrub_fun=function(x)scrub(x,default=0),
  scrub=function(x, default = 0){
    if(length(x) == 0) return(default)
    x[which(!is.finite(x))] <- default
    return(x)
  },
  default_value=NA
){
  i_expr<-parse(text=as.character(i_name))
  j_expr<-parse(text=as.character(j_name))
  v_expr<-parse(text=as.character(v_name))
  i<-as.character(eval(i_expr,envir=data))
  j<-as.character(eval(j_expr,envir=data))
  x<-eval(v_expr,envir=data)
  df<-data.table(i=i,j=j,x=x)[,.(x=fun(x)),keyby="i,j"]
  is<-sort(unique(df$i))
  js<-sort(unique(df$j))
  res<-matrix(
    default_value,
    nrow=length(is),
    ncol=length(js),
    dimnames = list(is,js)
  )
  i<-match(df$i,rownames(res))
  j<-match(df$j,colnames(res))
  res[cbind(i,j)[!is.na(df$x),]]<-df$x[!is.na(df$x)]
  scrub_fun(res)
}
@


<<,cache=FALSE, eval=TRUE, echo=FALSE, message=FALSE, warning=FALSE, results="hide">>=

require(stringi)
require(data.table)
require(readxl)
require(ggplot2)
require(magrittr)
library(Rblpapi)

scrape_duke<-function(
  fname="N:/Depts/Global/Absolute Insight/UK Equity/AbsoluteUK xp final.xlsm"
){
  
  rcon<-Rblpapi::blpConnect()
  # DUKE AUM 
  duke_summary_scrape<-data.table(read_xlsx(
    path=fname,
    sheet="DUKE Summary",
    range="A4:B11",
    col_names = c("A","B"),
    col_types = "text"
  ))[,.(
    parameter=make.names(A),
    value=scrub(as.numeric(B))
  )][,.SD,keyby=parameter]
  
  # DUKE open positions
  duke_position_scrape<-data.table(read_xlsx(
    path=fname, 
    sheet = "DUKE Open Trades", 
    range = "B10:P2000", 
    col_names = c("B","C","D","E","F","G","H","I","J","K","L","M","N","O","P"), 
    col_types = "text"
  ))[grepl("^[A-Z]{2,4}[0-9]{1,3}$",stri_trim(toupper(B)))][,.(
    row=seq_along(C),
    manager=toupper(C),
    pair=toupper(B[B!=""][findInterval(1:length(B),which(B!=""),all.inside = TRUE,rightmost.closed = TRUE)]),
    direction=toupper(D),
    ticker=local({
      x0<-gsub("[ ]{2,10}"," ",F)
      x1<-toupper(x0)
      x2<-gsub("EQUITY$","Equity",x1)
      x3<-gsub("INDEX$","Index",x2)
      ifelse(is.na(x3),"",x3)
    }),
    units=scrub(as.integer(I)),
    multiplier=scrub(as.integer(H)),
    quantity=scrub(as.integer(H))*scrub(as.integer(I)),
    price=scrub(as.numeric(G)),
    cash=(-1)*scrub(as.numeric(J)),
    asset_value=scrub(as.numeric(N)),
    pnl=scrub(as.numeric(O)),
    bps=scrub(as.numeric(P)),
    fx=scrub(as.numeric(M)),
    local_asset_value=scrub(as.numeric(L)),
    class=ticker_class(gsub("INDEX$","Index",gsub("EQUITY$","Equity",toupper(F))))
  )][,c(.SD,list(
    risk_ticker=local({
      res<-Rblpapi::bdp(unique(ticker[grepl("future",class)]),"UNDL_SPOT_TICKER")
      res1<-data.table(
        sheet_ticker=rownames(res),
        risk_ticker=paste0(res$UNDL_SPOT_TICKER," Index")
      )[,.SD,keyby=sheet_ticker]
      res2<-res1[J(ticker),risk_ticker]
      ifelse(is.na(res2),ticker,res2)
    })
  ))][ticker!=""][,.(
    manager=unique(manager),
    exposure=sum(asset_value)/duke_summary_scrape["Current.fund",value]
  ),keyby=c("pair","risk_ticker")][,.(
    manager,
    pair,
    ticker=risk_ticker,
    exposure=round(exposure*10000,digits=1)
  )]
  
  duke_position_scrape
  
}



scrape_tim<-function(
  fname="N:/Depts/Share/UK Alpha Team/Analytics/test/tim1.csv"
){
  x<-fread(fname) %>%
  {names(.)<-mapply(function(n)paste0(strsplit(gsub("[^[:alnum:] ]", "",n), " +")[[1]],collapse=""),n=names(.));.} %>%
  {.$CurrentInvestment<-as.numeric(gsub(",","",.$CurrentInvestment));.}
  
  company2manager<-function(company)abbreviate(mapply(
      function(n){
        res<-paste0(strsplit(gsub("[^[:alnum:] ]", "",n), " +")[[1]],collapse="")
        toupper(res)
      },
      n=company
  ),minlength = 2)
  
  author2pair<-function(author)abbreviate(mapply(
    function(n){
      res<-paste0(strsplit(gsub("[^[:alnum:] ]", "",n), " +")[[1]],collapse="")
      toupper(res)
    },
    n=author
  ))  
  
  all_pms<-company2manager(sort(unique(x$AuthorCompany)))
  all_pairs<-author2pair(sort(unique(x$Author)))
  
  res<-x[,.(
    manager=company2manager(AuthorCompany),
    pair=paste0(company2manager(AuthorCompany),stri_pad(match(author2pair(Author),all_pairs),width=3,side="left",pad="0")),
    ticker=ifelse(grepl("(Index$)|(Equity$)",Ticker),Ticker,paste0(Ticker," Equity")),
    exposure=round(10000*ifelse(Type=="Long",1,-1)*CurrentInvestment/sum(CurrentInvestment),digits=1)
  )]
  
  dollar_neutral<-res[,.(
    manager=manager[1],
    ticker="SXXP Index",
    exposure=-sum(exposure)
  ),keyby=pair]
  
  dollar_neutral_tim<-rbind(
    res,
    dollar_neutral
  )[,.(
      manager=manager[1],
      exposure=round(sum(exposure),digits=1)
  ),keyby=c("pair","ticker")]
  
  dollar_neutral_tim
}
@

<<,cache=FALSE, eval=TRUE, echo=FALSE, message=FALSE, warning=FALSE, results="hide">>=
#
# fetch data
#

fname_offs<-"https://raw.githubusercontent.com/satrapade/pairs/data/AbsoluteUK%20xp%20final.xlsm"
fname_ons<-"N:/Depts/Global/Absolute Insight/UK Equity/AbsoluteUK xp final.xlsm"

duke_position_scrape<-scrape_duke(fname_ons)
tim_position_scrape<-scrape_tim("N:/Depts/Share/UK Alpha Team/Analytics/test/tim1.csv")

duke_position_scrape<-scrape_duke(fname_ons)

duke_position_scrape$ticker[duke_position_scrape$ticker=="MHG NO Equity"]<-"MOWI NO Equity"


all_tickers<-sort(unique(duke_position_scrape$ticker))

all_days<-make_date_range(
  start = as.character(Sys.Date()-365*2,format="%Y-%m-%d"),
  end = as.character(Sys.Date(),format="%Y-%m-%d"),
  leading_days = 0,
  trailing_days = 0
)

ref_matrix<-matrix(
    0,
    ncol=length(all_tickers),
    nrow=length(all_days),
    dimnames=list(all_days,all_tickers)
)

# load total returns

local_tret<-as.matrix(memo_populate_history_matrix(
    ref_matrix=ref_matrix,
    bbg_field="DAY_TO_DAY_TOT_RETURN_GROSS_DVDS",
    bbg_overrides=NULL,
    post_fetch_fun=function(x)scrub(as.numeric(x))/100,
    verbose=TRUE,
    force=FALSE
))


  
factor_tickers<-c(
  "UKX Index",
  "MCX Index",
  "SMX Index",
  "DAX Index",
  "CAC Index",
  "V2X Index",
  ################## bloomberg indices
  "PMOMENUS Index",
  ################## SG factors
  "SGBVPMEU Index",
  "SGBVPHVE Index",
  "SGIXTFEQ Index",
  "SGIXTFFX Index",
  "SGIXTFIR Index",
  #"SGIXGCM Index",
  "SGIXTFCY Index",
  ################## JPM themes
  "JPEUBATL Index",
  "JPEUBATW Index",
  #################
  # MS quant pairs
  "MSEEMOMO Index",
  "MSEEGRW Index", #
  "MSEEVAL Index", #
  "MSSTERSI Index", #
  "MSSTPERI Index", #
  "MSSTHYDS Index",
  "MSEERVOL Index",
  #################
  "SPEULVE Index", # SP low vol
  "SPEULVDP Index", # lo vol, high divident
  "M07IEU02 Index", # barra low vol
  "XDEBEUR EU Equity", # xtrackers MSCI world minimum vol
  #################
  "JPDUKB16 Index", # brexit hedge basket
  ################# MW TOPS
  "SXXE Index","SXXP Index", # all stocks
  "SX3E Index","SX3P Index", # food and beverage
  "SX4E Index","SX4P Index", # chemicals
  "SX6E Index","SX6P Index", # utilities
  "SX7E Index","SX7P Index", # banks
  "SX8E Index","SX8P Index", # tech
  "SXAE Index","SXAP Index", # auto
  "SXDE Index","SXDP Index", # health
  "SXEE Index","SXEP Index", # energy
  "SXFE Index","SXFP Index", # financial services
  "SXIE Index","SXIP Index", # insurance
  "SXKE Index","SXKP Index", # telecoms
  "SXME Index","SXMP Index", # media
  "SXNE Index","SXNP Index", # industrial goods and services
  "SXOE Index","SXOP Index", # construction and materials
  "SXPE Index","SXPP Index", # basic resource
  "SXQE Index","SXQP Index", # personal and household goods
  "SXRE Index","SXRP Index", # retail
  "SXTE Index","SXTP Index", # travel and leisure
  "SX86E Index","SX86P Index" # real estate
  #################
)


benchmark_tickers<-c(
  "BARESSA ID Equity",
  "HFRXEH Index"
)

############################

factor_ref_matrix<-matrix(
    0,
    ncol=length(factor_tickers),
    nrow=length(all_days),
    dimnames=list(all_days,factor_tickers)
)

# load total returns

factor_local_tret<-as.matrix(memo_populate_history_matrix(
    ref_matrix=factor_ref_matrix,
    bbg_field="DAY_TO_DAY_TOT_RETURN_GROSS_DVDS",
    bbg_overrides=NULL,
    post_fetch_fun=function(x)scrub(as.numeric(x))/100,
    verbose=TRUE,
    force=FALSE
))

benchmark_ref_matrix<-matrix(
  0,
  ncol=length(benchmark_tickers),
  nrow=length(all_days),
  dimnames=list(all_days,benchmark_tickers)
)

benchmark_local_tret<-as.matrix(memo_populate_history_matrix(
    ref_matrix=benchmark_ref_matrix,
    bbg_field="DAY_TO_DAY_TOT_RETURN_GROSS_DVDS",
    bbg_overrides=NULL,
    post_fetch_fun=function(x)scrub(as.numeric(x))/100,
    verbose=TRUE,
    force=FALSE
))


#
#
#


get_single_bar<-function(
  ticker,
  start=Sys.time()-60*60*24*14,
  end=Sys.time(),
  force=FALSE
){
  the_key<-list("get_single_bar",ticker,start,end)
  cached_value<-loadCache(key=the_key)
  if(!is.null(cached_value))if(!force)return(cached_value)
  res<-Rblpapi::getBars(
    ticker,
    barInterval = 10,
    startTime = start,
    endTime = end
  )
  cached_value<-data.table(ticker=rep(ticker,nrow(res)),res)
  saveCache(cached_value,key=the_key)
  cached_value
}

bars<-do.call(
  rbind,
  mapply(
    get_single_bar,
    sort(unique(c(all_tickers,factor_tickers))),
    MoreArgs=list( 
      start=as.POSIXct.Date(Sys.Date())-60*60*24*14,
      end=as.POSIXct.Date(Sys.Date())
    ),
    SIMPLIFY=FALSE
  )
)


x0<-NNcast(bars, i_name="times", j_name="ticker", v_name="close", fun=sum)

bar_matrix<-structure(apply(
  x0,
  2,
  function(x)x%>%replace_zero_with_last%>%{diff(.)/head(.,-1)}
),dimnames=list(tail(rownames(x0),-1),colnames(x0)))
@



<<,cache=FALSE, eval=TRUE, echo=FALSE, message=FALSE, warning=FALSE, results="hide">>=

#
# calculate stuff
#

manager_ptf<-mapply(
  function(the_manager){
    if(the_manager!="*")the_manager<-paste0("^",the_manager,"$")
    structure(cbind(
      duke_position_scrape[,.(
        exposure=sum(ifelse(grepl(the_manager,manager),exposure,0))
      ),keyby=ticker][,exposure]
    ),dimnames=list(sort(unique(duke_position_scrape$ticker)),the_manager))
  },
  c(sort(unique(duke_position_scrape$manager)),"*")
)

pair_ptf<-mapply(
  function(the_pair)structure(cbind(
    duke_position_scrape[,.(exposure=sum(ifelse(grepl(paste0("^",the_pair,"$"),pair),exposure,0))),keyby=ticker][,exposure]
  ),dimnames=list(sort(unique(duke_position_scrape$ticker)),the_pair)),
  sort(unique(duke_position_scrape$pair))
)

long_pair_ptf<-pmax(pair_ptf,0)
short_pair_ptf<-pmin(pair_ptf,0)


duke<-local_tret%*%manager_ptf

intraday_duke<-bar_matrix[,all_tickers]%*%manager_ptf

inv_factor_cov<-solve(cov(factor_local_tret))
intraday_inv_factor_cov<-solve(cov(bar_matrix[,factor_tickers]))
  
duke_explain_all<- factor_local_tret %*% t(cov(duke,factor_local_tret) %*% inv_factor_cov)

intraday_duke_explain_all<- bar_matrix[,factor_tickers] %*% t(cov(intraday_duke,bar_matrix[,factor_tickers]) %*% intraday_inv_factor_cov)

benchmark_explain_all<- factor_local_tret %*% t(cov(benchmark_local_tret,factor_local_tret) %*% inv_factor_cov)


duke_specific_all <- duke - duke_explain_all  
intraday_duke_specific_all <- intraday_duke - intraday_duke_explain_all  
benchmark_specific_all <- benchmark_local_tret - benchmark_explain_all  

duke_pairs<-local_tret%*%pair_ptf
intraday_duke_pairs<-bar_matrix[,all_tickers]%*%pair_ptf
long_intraday_duke_pairs<-bar_matrix[,all_tickers]%*%long_pair_ptf
short_intraday_duke_pairs<-bar_matrix[,all_tickers]%*%short_pair_ptf


@


<<,cache=FALSE, eval=TRUE, echo=FALSE, message=FALSE, warning=FALSE, results="hide">>=
#
# intraday grids: row is managers, columns is days
#

intraday_pair_pnl<-apply(intraday_duke_pairs,2,cumsum) %>%
{data.table(day=stri_sub(rownames(.),9,11),time=as.POSIXct(rownames(.)),.)} %>%
{melt(.,id.vars=c("day","time"),measure.vars=NULL)} %>%
{.[,.(
    manager=gsub("[0-9]+$","",variable),
    time=local({i<-order(time); time[i]}),
    pnl=local({i<-order(time); value[i]-value[i][1]}),
    date=as.character(time,format="%Y-%m-%d"),
    bar=seq_along(time),
    bar_count=length(time)
  ),keyby=c("variable","day")][bar_count>100]
}

intraday_pair_long_pnl<-apply(long_intraday_duke_pairs,2,cumsum) %>%
{data.table(day=stri_sub(rownames(.),9,11),time=as.POSIXct(rownames(.)),.)} %>%
{melt(.,id.vars=c("day","time"),measure.vars=NULL)} %>%
{.[,.(
    manager=gsub("[0-9]+$","",variable),
    time=local({i<-order(time); time[i]}),
    pnl=local({i<-order(time); value[i]-value[i][1]}),
    date=as.character(time,format="%Y-%m-%d"),
    bar=seq_along(time),
    bar_count=length(time)
  ),keyby=c("variable","day")][bar_count>100]
}

intraday_pair_short_pnl<-apply(short_intraday_duke_pairs,2,cumsum) %>%
{data.table(day=stri_sub(rownames(.),9,11),time=as.POSIXct(rownames(.)),.)} %>%
{melt(.,id.vars=c("day","time"),measure.vars=NULL)} %>%
{.[,.(
    manager=gsub("[0-9]+$","",variable),
    time=local({i<-order(time); time[i]}),
    pnl=local({i<-order(time); value[i]-value[i][1]}),
    date=as.character(time,format="%Y-%m-%d"),
    bar=seq_along(time),
    bar_count=length(time)
  ),keyby=c("variable","day")][bar_count>100]
}

intraday_manager_all<-apply(intraday_duke,2,cumsum) %>%
{data.table(day=stri_sub(rownames(.),9,11),time=as.POSIXct(rownames(.)),.)} %>%
{melt(.,id.vars=c("day","time"),measure.vars=NULL)} %>%
{.[,.(
    manager=variable,
    time=local({i<-order(time); time[i]}),
    pnl=local({i<-order(time); value[i]-value[i][1]}),
    date=as.character(time,format="%Y-%m-%d"),
    bar=seq_along(time),
    bar_count=length(time)
  ),keyby=c("variable","day")][bar_count>100]
}

intraday_manager_explained<-apply(intraday_duke_explain_all,2,cumsum) %>%
{data.table(day=stri_sub(rownames(.),9,11),time=as.POSIXct(rownames(.)),.)} %>%
{melt(.,id.vars=c("day","time"),measure.vars=NULL)} %>%
{.[,.(
    manager=variable,
    time=local({i<-order(time); time[i]}),
    pnl=local({i<-order(time); value[i]-value[i][1]}),
    date=as.character(time,format="%Y-%m-%d"),
    bar=seq_along(time),
    bar_count=length(time)
  ),keyby=c("variable","day")][bar_count>100]
}


intraday_manager_specific<-apply(intraday_duke_specific_all,2,cumsum) %>%
{data.table(day=stri_sub(rownames(.),9,11),time=as.POSIXct(rownames(.)),.)} %>%
{melt(.,id.vars=c("day","time"),measure.vars=NULL)} %>%
{.[,.(
    manager=variable,
    time=local({i<-order(time); time[i]}),
    pnl=local({i<-order(time); value[i]-value[i][1]}),
    date=as.character(time,format="%Y-%m-%d"),
    bar=seq_along(time),
    bar_count=length(time)
  ),keyby=c("variable","day")][bar_count>100]
}



intraday_manager_pnl<-rbind(
  intraday_pair_pnl[,.(pnl=sum(pnl),date=max(date),day=max(day),bar=max(bar),type="all"),keyby=c("manager","time")],
  intraday_pair_long_pnl[,.(pnl=sum(pnl),date=max(date),day=max(day),bar=max(bar),type="long"),keyby=c("manager","time")],
  intraday_pair_short_pnl[,.(pnl=sum(pnl),date=max(date),day=max(day),bar=max(bar),type="short"),keyby=c("manager","time")]
)

intraday_manager<-rbind(
  data.table(intraday_manager_explained,type="exp"),
  data.table(intraday_manager_specific,type="spc"),
  data.table(intraday_manager_all,type="all")
)

gg_intraday_manager <- intraday_manager_pnl[type=="all"] %>% 
  ggplot(aes(x=bar,y=pnl,col=manager)) +
  geom_hline(yintercept=0) +
  geom_line(size=1) +
  facet_grid(cols = vars(date), rows = vars(manager)) +
  theme(legend.position="none")

gg_intraday_manager_ls <- intraday_manager_pnl[type!="all"] %>% 
  ggplot(aes(x=bar,y=pnl,col=type)) +
  geom_hline(yintercept=0) +
  geom_line(size=1) +
  facet_grid(cols = vars(date), rows = vars(manager)) 

gg_intraday_manager_explain <- intraday_manager[manager!="*"] %>% 
  ggplot(aes(x=bar,y=pnl,col=type)) +
  geom_hline(yintercept=0) +
  geom_line(size=1) +
  facet_grid(cols = vars(date), rows = vars(manager)) 

gg_intraday_manager_squiggle <- intraday_manager_pnl[type!="all"][,
    .(
      long_pnl=pnl[type=="long"][1],
      short_pnl=pnl[type=="short"][1]
    ),
    keyby=c("manager","date","bar")
  ][,.(
    long_pnl=floor(rescale(long_pnl[order(bar)],to=c(0,100))),
    short_pnl=floor(rescale(short_pnl[order(bar)],to=c(0,100))),
    bar=sort(bar)
  ),keyby=c("manager","date")] %>% 
  ggplot()+ 
  geom_line(aes(x=long_pnl,y=short_pnl,col=bar),size=1) +
  facet_grid(cols = vars(date), rows = vars(manager)) 
@

\newpage
\section{Manager intraday}

\begin{center}
\Sexpr{make_plot(
  plot(gg_intraday_manager),
  width="20cm",
  height="23cm",
  envir=environment()
)}
\end{center}

\newpage
\section{Manager long vs short intraday}

\begin{center}
\Sexpr{make_plot(
  plot(gg_intraday_manager_ls),
  width="20cm",
  height="23cm",
  envir=environment()
)}
\end{center}

\newpage
\section{Manager squiggle}

\begin{center}
\Sexpr{make_plot(
  plot(gg_intraday_manager_squiggle),
  width="20cm",
  height="23cm",
  envir=environment()
)}
\end{center}

\newpage
\section{Manager explain}

\begin{center}
\Sexpr{make_plot(
  plot(gg_intraday_manager_explain),
  width="20cm",
  height="23cm",
  envir=environment()
)}
\end{center}



<<,cache=FALSE, eval=TRUE, echo=FALSE, message=FALSE, warning=FALSE, results="hide">>=

#
# plot explain of NOW portfolio over
# 2 years, daily
#
g_2y_explain<-rbind(
  data.table(
    date=as.Date(rownames(duke_specific_all),format="%Y-%m-%d"),
    pnl=cumsum(duke_specific_all[,"*"]),
    what="NOW unexpl"
  ),
  data.table(
     date=as.Date(rownames(duke),format="%Y-%m-%d"),
     pnl=cumsum(duke[,"*"]),
     what="NOW"
  ),
  data.table(
     date=as.Date(rownames(duke_explain_all),format="%Y-%m-%d"),
     pnl=cumsum(duke_explain_all[,"*"]),
     what="NOW expl"
  )
) %>% 
  ggplot() +
  geom_line(aes(x=date,y=pnl,col=what),size=2,alpha=0.75)


#
# plot explain for NOW portfolio over
# 2 weeks
#
g_2w_explain<-rbind(
  data.table(
    bar=1:nrow(intraday_duke_specific_all),
    pnl=cumsum(intraday_duke_specific_all[,"*"]),
    what="specific"
  ),
  data.table(
     bar=1:nrow(intraday_duke),
     pnl=cumsum(intraday_duke[,"*"]),
     what="all"
  ),
  data.table(
     bar=1:nrow(intraday_duke_explain_all),
     pnl=cumsum(intraday_duke_explain_all[,"*"]),
     what="explained"
  )
) %>% 
  ggplot() +
  geom_line(aes(x=bar,y=pnl,col=what),size=2,alpha=0.75)
  

#
# plot DUKE, NOW and HFRXEH
#
g_bench<-rbind(
  data.table(
     date=as.Date(rownames(duke),format="%Y-%m-%d"),
     pnl=cumsum(duke[,"*"]),
     what="NOW"
  ),
  data.table(
     date=as.Date(rownames(benchmark_local_tret),format="%Y-%m-%d"),
     pnl=cumsum(benchmark_local_tret[,"BARESSA ID Equity"]*10000),
     what="DUKE"
  ),
  data.table(
     date=as.Date(rownames(benchmark_local_tret),format="%Y-%m-%d"),
     pnl=local({
       sd1<-sd(benchmark_local_tret[,"HFRXEH Index"])
       sd2<-sd(benchmark_local_tret[,"BARESSA ID Equity"])
       cumsum(benchmark_local_tret[,"HFRXEH Index"]*10000*sd2/sd1)
      }),
     what="HFRXEH"
  )
) %>% 
  ggplot() +
  geom_line(aes(x=date,y=pnl,col=what),size=2,alpha=0.75)


#
# plot DUKE, HFRX specific
#
g_2y_benchmark_specific<-rbind(
  data.table(
    date=as.Date(rownames(benchmark_specific_all),format="%Y-%m-%d"),
    pnl=cumsum(benchmark_specific_all[,"BARESSA ID Equity"]*10000),
    what="DUKE"
  ),
  data.table(
     date=as.Date(rownames(benchmark_specific_all),format="%Y-%m-%d"),
     pnl=local({
       sd1<-sd(benchmark_specific_all[,"HFRXEH Index"])
       sd2<-sd(benchmark_specific_all[,"BARESSA ID Equity"])
       cumsum(benchmark_specific_all[,"HFRXEH Index"]*10000)
      }),
     what="HFRX"
  )
) %>% 
  ggplot() +
  geom_line(aes(x=date,y=pnl,col=what),size=2,alpha=0.75)



@

\definecolor{GGRED}{HTML}{F8766D}
\definecolor{GGBLUE}{HTML}{00BFC4}

\section{P\&L explain}

\begin{center}
\begin{tabular}{m{10cm} m{10cm}}
\hline
\rowcolor{gray!20}
\multicolumn{1}{c}{2 year, daily} & \multicolumn{1}{c}{14 days, 10min bars} 
\\
\Sexpr{make_plot(plot(g_2y_explain),width="10cm",height="10cm",envir=environment())}
&
\Sexpr{make_plot(plot(g_2w_explain),width="10cm",height="10cm",envir=environment())} 
\\
\hline
\multicolumn{1}{c}{DUKE, HFRXEH(vol scaled), NOW} & \multicolumn{1}{c}{DUKE, HFRX specific} 
\\
\Sexpr{make_plot(plot(g_bench),width="10cm",height="10cm",envir=environment())} 
&
\Sexpr{make_plot(plot(g_2y_benchmark_specific),width="10cm",height="10cm",envir=environment())} 
\\
\end{tabular}
\end{center}



\newpage
\section{Position summary}
<<,cache=FALSE, eval=TRUE, echo=FALSE, message=FALSE, warning=FALSE, results="hide">>=
require(Hmisc)
require(scales)


manager_ptf<-mapply(
  function(the_manager){
    if(the_manager!="*")the_manager<-paste0("^",the_manager,"$")
    structure(cbind(
      duke_position_scrape[,.(
        exposure=sum(ifelse(grepl(the_manager,manager),exposure,0))
      ),keyby=ticker][,exposure]
    ),dimnames=list(sort(unique(duke_position_scrape$ticker)),the_manager))
  },
  c(sort(unique(duke_position_scrape$manager)),"*")
)

duke<-local_tret%*%manager_ptf
intraday_duke<-bar_matrix[,all_tickers]%*%manager_ptf




duke_cor_sample<-do.call(rbind,mapply(function(i){
  s<-sample.int(nrow(duke),nrow(duke)*0.68,replace=FALSE)
  matrix(
    cor(duke[s,],factor_local_tret[s,"SXXP Index"]),
    nrow=1,
    dimnames=list(NULL,colnames(duke))
  )
},1:100,SIMPLIFY=FALSE))


duke_ticking<-which(apply(intraday_duke,1,sd)>1e-10)

intraday_duke_cor_sample<-do.call(rbind,mapply(function(i){
  s<-sample(duke_ticking,length(duke_ticking)*0.68,replace=FALSE)
  matrix(
    cor(intraday_duke[s,],bar_matrix[s,"SXXP Index"]),
    nrow=1,
    dimnames=list(NULL,colnames(duke))
  )
},1:100,SIMPLIFY=FALSE))


sign_color<-function(t,s){
  paste0(ifelse(s<0,"\\textcolor{red}{","\\textcolor{black}{\\phantom{-}"),t,"}")
}

position_summary_df<-data.table(
  subset=gsub("\\^|\\$","",colnames(duke)),
  net=structure(
    mapply(function(n)duke_position_scrape[grepl(n,manager),sum(exposure)],colnames(duke)%>%{ifelse(.=="*","*",paste0("^",.,"$"))}),
    format=quote(sign_color(comma(round(this,digits=1),digits=1),this))
  ),
  gross=structure(
    mapply(function(n)duke_position_scrape[grepl(n,manager),sum(abs(exposure))],colnames(duke)%>%{ifelse(.=="*","*",paste0("^",.,"$"))}),
    format=quote(sign_color(comma(round(this,digits=1),digits=1),this))
  ),
  cor1=structure(
    drop(cor(duke,factor_local_tret[,"SXXP Index"])),
    hdr=tbl(c("cor","whole","period","2y","SXXP")),
    format=quote(sign_color(round(100*this,digits=1),this))
  ),
  cor1_hi=structure(
    apply(duke_cor_sample,2,quantile,0.9),
    hdr=tbl(c("cor","90pct","quantile","2y","SXXP")),
    format=quote(sign_color(round(100*this,digits=1),this))
  ),
  cor1_lo=structure(
    apply(duke_cor_sample,2,quantile,0.1),
    hdr=tbl(c("cor","10pct","quantile","2y","SXXP")),
    format=quote(sign_color(round(100*this,digits=1),this))
  ),
  cor2=structure(
    drop(cor(intraday_duke,bar_matrix[,"SXXP Index"])),
    hdr=tbl(c("cor","2 week","SXXP")),
    format=quote(sign_color(round(100*this,digits=1),this))
  ),
  cor2_hi=structure(
    apply(intraday_duke_cor_sample,2,quantile,0.9),
    hdr=tbl(c("cor","90pct","quantile","2 week","SXXP")),
    format=quote(sign_color(round(100*this,digits=1),this))
  ),
  cor2_lo=structure(
    apply(intraday_duke_cor_sample,2,quantile,0.1),
    hdr=tbl(c("cor","10pct","quantile","2 week","SXXP")),
    format=quote(sign_color(round(100*this,digits=1),this))
  )
)

@

\begin{center}
\Sexpr{ntable(
  df=position_summary_df
)}
\end{center}

\newpage
\section{Pair risk contribution}
<<,cache=FALSE, eval=TRUE, echo=FALSE, message=FALSE, warning=FALSE, results="hide">>=
#
# compute look-through exposures
#
require(DBI)
if(exists("db"))dbDisconnect(db)
db<-dbConnect(
  odbc::odbc(), 
  .connection_string = paste0(
    "driver={SQL Server};",
    "server=SQLS071FP\\QST;",
    "database=PRDQSTFundPerformance;",
    "trusted_connection=true"
  )
)
duke_index_exposure<-duke_position_scrape[ticker_class(ticker)=="index|nomatch"][pair!="DH20"]
duke_equity_exposure<-duke_position_scrape[ticker_class(ticker)=="equity|nomatch"][pair!="DH20"]

source("https://raw.githubusercontent.com/satrapade/pairs/master/utility/fetch_index_weights.R")

rconn<-Rblpapi::blpConnect()

super_sector_index_map<-fread(
'
  NAME,                           INDEX
  "Automobiles & Parts",          "SXA"
  "Banks",                        "SX7"
  "Basic Resources",              "SXP"
  "Chemicals",                    "SX4"
  "Construction & Materials",     "SXO"
  "Financial Services",           "SXF"
  "Food & Beverage",              "SX3"
  "Health Care",                  "SXD"
  "Industrial Goods & Services",  "SXN"
  "Insurance",                    "SXI"
  "Media",                        "SXM"
  "Oil & Gas",                    "SXE"
  "Personal & Household Goods",   "SXQ"
  "Real Estate",                  "SX86"
  "Retail",                       "SXR"
  "Technology",                   "SX8"
  "Telecommunications",           "SXK"
  "Travel & Leisure",             "SXT"
  "Utilities",                    "SX6"         
'
)[,
  c(
    "P_Index",
    "E_Index"
  ):=list(
    P_index=local({
      Rblpapi::bdp(unique(paste0(INDEX,"P Index")),"DAY_TO_DAY_TOT_RETURN_GROSS_DVDS")[
        paste0(INDEX,"P Index")  , "DAY_TO_DAY_TOT_RETURN_GROSS_DVDS"
      ]
    }),
    E_index=local({
      Rblpapi::bdp(unique(paste0(INDEX,"E Index")),"DAY_TO_DAY_TOT_RETURN_GROSS_DVDS")[
        paste0(INDEX,"E Index")  , "DAY_TO_DAY_TOT_RETURN_GROSS_DVDS"
        ]
    })
  )
]




duke_index_look_through<-do.call(rbind,
  mapply(
    function(
      manager,
      pair,
      ndx,
      exposure
    ){
      #cat(manager,pair,"\n")
      if(class(try(fetch_index_weights(ndx),silent=TRUE))=="try-error")ndx<-"SXXP Index"
      res<-fetch_index_weights(ndx)[,"exposure":=exposure*Weight/sum(Weight)] 
      bbg_ticker<-Rblpapi::bdp(paste0("/buid/",res$UniqueId),"PARSEKYABLE_DES")
      res$ticker<-bbg_ticker[paste0("/buid/",res$UniqueId),"PARSEKYABLE_DES"]
      data.table(
        manager=manager,
        pair=pair,
        ticker=res$ticker,
        exposure=res$exposure,
        source="LookThrough",
        index=ndx
      )
    },
    manager=duke_index_exposure$manager,
    pair=duke_index_exposure$pair,
    ndx=duke_index_exposure$ticker,
    exposure=duke_index_exposure$exposure,
    SIMPLIFY = FALSE
  )
)

duke_look_through_exposure<-rbind(
  duke_equity_exposure[,.(manager,pair,ticker,exposure,source="Outright",index="None")],
  duke_index_look_through
)[abs(exposure)>0]


universe<-data.table(
  ticker=sort(unique(duke_look_through_exposure$ticker)),
  sector=Rblpapi::bdp(sort(unique(duke_look_through_exposure$ticker)),"ICB_SUPERSECTOR_NAME")[
    sort(unique(duke_look_through_exposure$ticker)),
    "ICB_SUPERSECTOR_NAME"
  ]
)[,.SD,keyby=ticker]

duke_aggregated_look_through_exposure<-duke_look_through_exposure[,.(
  exposure=sum(exposure),
  sector=universe[ticker,sector],
  index=super_sector_index_map[,.SD,keyby=NAME][universe[ticker,sector],INDEX]
),keyby=c("manager","pair","ticker","source")][abs(exposure)>0]

duke_look_vs_outright<-duke_aggregated_look_through_exposure[,.(
  Outright=sum(exposure[source=="Outright"]),
  LookThrough=sum(exposure[source=="LookThrough"]),
  sector=universe[ticker,sector]
),keyby=ticker]

total_gross<-duke_look_vs_outright[,sum(abs(Outright+LookThrough))]

gross_fraction <- duke_aggregated_look_through_exposure[,.(
  gross=sum(abs(exposure))
),keyby=pair] %>% 
  {setNames(.$gross,.$pair)} %>%
  {./sum(.)}

pair_weights<-total_gross*gross_fraction

pair_gross<-total_gross*gross_fraction

pair_lt_matrix<-NNcast(
  duke_aggregated_look_through_exposure[!is.na(index)],
  i_name="pair",
  j_name="index",
  v_name="exposure"
)

pair_ptf<-mapply(
  function(the_pair)structure(cbind(
    duke_position_scrape[,.(exposure=sum(ifelse(grepl(paste0("^",the_pair,"$"),pair),exposure,0))),keyby=ticker][,exposure]
  ),dimnames=list(sort(unique(duke_position_scrape$ticker)),the_pair)),
  the_pair=setdiff(sort(unique(duke_position_scrape$pair)),"DH20")
)
rownames(pair_ptf)<-sort(unique(duke_position_scrape$ticker))
duke_pairs<-local_tret%*%pair_ptf
intraday_duke_pairs<-bar_matrix[,rownames(pair_ptf)]%*%pair_ptf

plt<-data.table(pair_lt_matrix[names(gross_fraction),])
for(i in names(plt)){
  attributes(plt[[i]])$format=quote(scol(n_fmt(round(this,digits=0)),this))
  attributes(plt[[i]])$hdr=tbl(c(
    gsub("^SX","",i),
    n_fmt(round(sum(plt[[i]]),digits=0))
  ),align="@{}l@{}")
}

pair_constituents<-duke_position_scrape[,.(
  ticker_max=gsub("( Equity)|( Index)|( [A-Z]{2})","",ticker[which.max(exposure)]),
  ticker_min=gsub("( Equity)|( Index)|( [A-Z]{2})","",ticker[which.min(exposure)]),
  ticker_most=gsub("( Equity)|( Index)|( [A-Z]{2})","",ticker[which.max(abs(exposure))]),
  stock_most=local({
    eq<-(ticker_class(ticker)=="equity|nomatch")
    ex<-ifelse(eq,exposure,0)
    if(max(abs(ex))<1e-10){
      return(gsub("( Equity)|( Index)|( [A-Z]{2})","",ticker[which.max(abs(exposure))]))
    }
    gsub("( Equity)|( Index)|( [A-Z]{2})","",ticker[which.max(abs(ex))])
  })
),keyby=pair]

pair_stats<-data.table(
  marginal_risk_contribution=structure(
    mrc(total_gross*gross_fraction,cov(duke_pairs)),
    format=quote(n_fmt(round(this,digits=1))),
    hdr=tbl(c("2Y","MRC","risk","cntr","pct"),align="@{}l@{}")
))

pair_stats$marginal_risk_contribution_1y<-structure(
    mrc(total_gross*gross_fraction,cov(tail(duke_pairs,365))),
    format=quote(n_fmt(round(this,digits=1))),
    hdr=tbl(c("1Y","MRC","risk","cntr","pct"),align="@{}l@{}")
)  

pair_stats$pair<-names(gross_fraction)

pair_stats$stock<-pair_constituents[names(gross_fraction),stock_most]

pair_stats$gross_fraction<-structure(
    100*gross_fraction,
    format=quote(round(this,digits=1)),
    hdr=tbl(c("GRS","pct","tot"),align="@{}l@{}")
)

pair_stats$gross<-structure(
    duke_position_scrape[,.(gross=sum(abs(exposure))),keyby="pair"][names(gross_fraction)][,gross],
    format=quote(round(this,digits=0)),
    hdr=tbl(c("ACT","gross","bps"),align="@{}l@{}")
)

pair_stats$rp_gross<-structure(
    apply(duke_pairs,2,sd)%>%{mean(.)/.}%>%{total_gross*./sum(.)}, # risk parity
    format=quote(n_fmt(round(this,digits=0))),
    hdr=tbl(c("RP","gross","bps"),align="@{}l@{}")
)

pair_stats$volatility<-structure(
    apply(duke_pairs,2,sd),
    format=quote(round(this,digits=1)),
    hdr=tbl(c("Vol","daily","bps"),align="l")
)

pair_stats<-pair_stats[order(-marginal_risk_contribution)]

pair_stats$cum_marginal_risk<-pair_stats[
  TRUE,
  structure(
      cumsum(marginal_risk_contribution),
      format=quote(round(this,digits=1)),
      hdr=tbl(c("Cum","2Y","marg","risk","pct"),align="@{}l@{}") 
)]

pair_stats$cum_marginal_risk_1y<-pair_stats[
  TRUE,
  structure(
      cumsum(marginal_risk_contribution_1y),
      format=quote(round(this,digits=1)),
      hdr=tbl(c("Cum","1Y","marg","risk","pct"),align="@{}l@{}") 
)]

source("https://raw.githubusercontent.com/satrapade/pairs/master/utility/volatility_trajectory.R")
pair_stats$volatility_trajectory<-pair_stats[
  TRUE,
  structure(
    volatility_trajectory_mrc(duke_pairs/100,setNames(gross,pair)),
    format=quote(round(this,digits=2)),
    hdr=tbl(c("Vol","traj","marg","risk","seq"),align="@{}l@{}")
)]

pair_stats<-data.table(pair_stats,plt[match(pair_stats$pair,rownames(pair_lt_matrix))])

pair_stats$corr_day<-pair_stats[
  TRUE,
  structure(
    100*mapply(
      cor,
      data.table(duke_pairs[,pair]),
      data.table(factor_local_tret[,paste0(colnames(pair_lt_matrix),"P Index")]%*%t(pair_lt_matrix[pair,]))
    ),
    format=quote(s1col(n_fmt(round(this,digits=0)),this,50)),
    hdr=tbl(c("COR","2","yr","daily"),align="@{}l@{}") 
 )
]

pair_stats$corr_10min<-pair_stats[
  TRUE,
  structure(
    100*mapply(
      cor,
      data.table(intraday_duke_pairs[,pair]),
      data.table(bar_matrix[,paste0(colnames(pair_lt_matrix),"P Index")]%*%t(pair_lt_matrix[pair,]))
    ),
    format=quote(s1col(n_fmt(round(this,digits=0)),this,50)),
    hdr=tbl(c("COR","2","wk","10min"),align="@{}l@{}") 
 )
]

pair_stats$perf3m<-pair_stats[
  TRUE,
  structure(
    colSums(tail(duke_pairs[,pair],91)),
    format=quote(cell_color(add_latex_env(paste0(ifelse(this>0,"\\phantom{-}",""),comma(this,digits=0)),"\\tt"),signed_ramp(this))),
    hdr=tbl(c("Perf","3m"),align="@{}l@{}") 
 )
]

pair_stats$perf1m<-structure(
    colSums(tail(duke_pairs[,pair_stats$pair],30)),
    format=quote(cell_color(add_latex_env(paste0(ifelse(this>0,"\\phantom{-}",""),comma(this,digits=0)),"\\tt"),signed_ramp(this))),
    hdr=tbl(c("Perf","1m"),align="@{}l@{}") 
)

pair_stats$perf1w<-structure(
    colSums(tail(duke_pairs[,pair_stats$pair],7)),
    format=quote(cell_color(add_latex_env(paste0(ifelse(this>0,"\\phantom{-}",""),comma(this,digits=0)),"\\tt"),signed_ramp(this))),
    hdr=tbl(c("Perf","1w"),align="@{}l@{}") 
)

bias_ramp<-function(x,bias=50,from="white",to="red"){
  gcr<-color_ramp(abs(x-bias),"white","green")
  rcr<-color_ramp(abs(x-bias),"white","red")
  ifelse(x>bias,gcr,rcr)
}

pair_stats$hit1w<-structure(
    100*cumsum(pmax(sign(colSums(tail(duke_pairs[,pair_stats$pair],30))),0))/seq_along(pair_stats$pair),
    format=quote(cell_color(add_latex_env(comma(this,digits=0),"\\tt"),bias_ramp(this,50))),
    hdr=tbl(c("HR","1m"),align="@{}l@{}") 
)


s1col<-function(t,s,th=50){
  r1<-ifelse(s>(+th),paste0("\\textcolor{red}{\\bf ",t,"}"),"")
  r2<-ifelse(s<=th,t,"")
  paste0(r1,r2)
}

scol<-function(t,s,th=50){
  r1<-ifelse(s<(-th),paste0("\\textcolor{red}{\\bf ",t,"}"),"")
  r2<-ifelse(s>(+th),paste0("\\textcolor{black}{\\bf ",t,"}"),"")
  r3<-ifelse(abs(s)<=th,t,"")
  paste0(r1,r2,r3)
}

latex_pair_stats<-ntable(
  df=pair_stats,
  scale="0.50",
  add_rownames=TRUE
)


@
\begin{center}
\Sexpr{latex_pair_stats}
\end{center}

\newpage
\section{Pair hedge stability table: topmost pairs have ``looser'' hedges}
<<,cache=FALSE, eval=TRUE, echo=FALSE, message=FALSE, warning=FALSE, results="hide">>=
require(Hmisc)
require(scales)

duke_ticking<-which(apply(intraday_duke,1,sd)>1e-10)

pair_ptf<-mapply(
  function(the_pair)structure(cbind(
    duke_position_scrape[,.(exposure=sum(ifelse(grepl(paste0("^",the_pair,"$"),pair),exposure,0))),keyby=ticker][,exposure]
  ),dimnames=list(sort(unique(duke_position_scrape$ticker)),the_pair)),
  sort(unique(duke_position_scrape$pair))
)

manager_ptf<-mapply(
  function(the_manager){
    if(the_manager!="*")the_manager<-paste0("^",the_manager,"$")
    structure(cbind(
      duke_position_scrape[,.(
        exposure=sum(ifelse(grepl(the_manager,manager),exposure,0))
      ),keyby=ticker][,exposure]
    ),dimnames=list(sort(unique(duke_position_scrape$ticker)),the_manager))
  },
  c(sort(unique(duke_position_scrape$manager)),"*")
)

duke_pairs<-local_tret%*%pair_ptf
intraday_duke_pairs<-bar_matrix[,all_tickers]%*%pair_ptf

duke_pair_cor_sample<-do.call(rbind,mapply(function(i){
  s<-sample.int(nrow(duke_pairs),nrow(duke_pairs)*0.68,replace=FALSE)
  matrix(
    cor(duke_pairs[s,],factor_local_tret[s,"SXXP Index"]),
    nrow=1,
    dimnames=list(NULL,colnames(duke_pairs))
  )
},1:100,SIMPLIFY=FALSE))

duke_pair_vov_2w<-apply(do.call(rbind,mapply(function(i){
   s<-sample(duke_ticking,length(duke_ticking)*0.68,replace=FALSE)
  matrix(
    apply(intraday_duke_pairs[s,],2,sd),
    nrow=1,
    dimnames=list(NULL,colnames(intraday_duke_pairs))
  )
},1:100,SIMPLIFY=FALSE)),2,function(x)diff(range(x)))/apply(duke_pairs,2,sd)

duke_pair_vov_2y<-apply(do.call(rbind,mapply(function(i){
  s<-sample.int(nrow(duke_pairs),nrow(duke_pairs)*0.68,replace=FALSE)
  matrix(
    apply(duke_pairs[s,],2,sd),
    nrow=1,
    dimnames=list(NULL,colnames(duke_pairs))
  )
},1:100,SIMPLIFY=FALSE)),2,function(x)diff(range(x)))/apply(duke_pairs,2,sd)




intraday_duke_pair_cor_sample<-do.call(rbind,mapply(function(i){
  s<-sample(duke_ticking,length(duke_ticking)*0.68,replace=FALSE)
  matrix(
    cor(intraday_duke_pairs[s,],bar_matrix[s,"SXXP Index"]),
    nrow=1,
    dimnames=list(NULL,colnames(intraday_duke_pairs))
  )
},1:100,SIMPLIFY=FALSE))

sign_color<-function(t,s){
  paste0(ifelse(s<0,"\\textcolor{red}{","\\textcolor{black}{\\phantom{-}"),t,"}")
}

pair_hedge_stability_summary_df<-data.table(
  pair=gsub("\\^|\\$","",colnames(duke_pairs)),
  net=structure(
    mapply(function(n)duke_position_scrape[grepl(n,pair),sum(exposure)],colnames(duke_pairs)),
    format=quote(sign_color(comma(round(this,digits=1)),this))
  ),
  gross=structure(
    mapply(function(n)duke_position_scrape[grepl(n,pair),sum(abs(exposure))],colnames(duke_pairs)),
    format=quote(sign_color(comma(this,digits=1),this))
  ),
  cor1=structure(
    drop(cor(duke_pairs,factor_local_tret[,"SXXP Index"])),
    hdr=tbl(c("cor","whole","period","2 year","SXXP"),align="l"),
    format=quote(sign_color(round(100*this,digits=1),this))
  ),
  cor2y_hi=structure(
    apply(duke_pair_cor_sample,2,quantile,0.9),
    hdr=tbl(c("cor","90pct","quantile","2 year","SXXP"),align="l"),
    format=quote(sign_color(round(100*this,digits=1),this))
  ),
  cor2y_lo=structure(
    apply(duke_pair_cor_sample,2,quantile,0.1),
    hdr=tbl(c("cor","10pct","quantile","2 year","SXXP"),align="l"),
    format=quote(sign_color(round(100*this,digits=1),this))
  ),
  cor2y_confidence=structure(
    apply(duke_pair_cor_sample,2,quantile,0.9)-apply(duke_pair_cor_sample,2,quantile,0.1),
    hdr=tbl(c("cor","confidence","interval","2 year","SXXP"),align="l"),
    format=quote(sign_color(round(100*this,digits=1),this))
  ),
  cor_2w=structure(
    drop(cor(intraday_duke_pairs,bar_matrix[,"SXXP Index"])),
    hdr=tbl(c("cor","whole","period","2 week","SXXP"),align="l"),
    format=quote(sign_color(round(100*this,digits=1),this))
  ),
  cor2w_hi=structure(
    apply(intraday_duke_pair_cor_sample,2,quantile,0.9),
    hdr=tbl(c("cor","90pct","quantile","2 week","SXXP"),align="l"),
    format=quote(sign_color(round(100*this,digits=1),this))
  ),
  cor2w_lo=structure(
    apply(intraday_duke_pair_cor_sample,2,quantile,0.1),
    hdr=tbl(c("cor","10pct","quantile","2 week","SXXP"),align="l"),
    format=quote(sign_color(round(100*this,digits=1),this))
  ),
  cor2w_confidence=structure(
    apply(intraday_duke_pair_cor_sample,2,quantile,0.9)-apply(intraday_duke_pair_cor_sample,2,quantile,0.1),
    hdr=tbl(c("cor","conficence","interval","2 week","SXXP"),align="l"),
    format=quote(sign_color(round(100*this,digits=1),this))
  ),
  vov_2w=structure(
    duke_pair_vov_2w,
    hdr=tbl(c("vol","of","vol","2 weeks"),align="l"),
    format=quote(sign_color(round(100*this,digits=1),this))
  ),
  vov_2y=structure(
    duke_pair_vov_2y,
    hdr=tbl(c("vol","of","vol","2 years"),align="l"),
    format=quote(sign_color(round(100*this,digits=1),this))
  ),
  has_index=structure(
    ifelse(
      mapply(
        function(p)duke_position_scrape[pair==p,any(grepl("Index$",ticker))],
        gsub("\\^|\\$","",colnames(duke_pairs))
      ),
      paste0("\\multicolumn{1}{c}{",dot("red"),"}"),
      ""
    ),
    hdr=tbl(c("has","index","position"),align="l")
  ),
  pnl_2w=structure(
    colSums(intraday_duke_pairs),
    hdr=tbl(c("2 week","P\\&L"),align="l"),
    format=quote(sign_color(round(this,digits=1),this))
  )
)

hedge_score<-rank(pair_hedge_stability_summary_df$vov_2w)+rank(pair_hedge_stability_summary_df$cor2w_confidence)

#cor(pair_hedge_stability_summary_df$vov_2w,pair_hedge_stability_summary_df$cor2w_confidence)

@

\begin{center}
\Sexpr{ntable(
  df=pair_hedge_stability_summary_df[order(-hedge_score)],
  title=paste0(
    "Pair vol-of-vols, correlations with SXXP, correlation confidence intervals:",
    " ordered by 2 week hedge and directional stability"
  ),
  scale="0.5"
)}
\end{center}

\newpage
\section{Manager pair correlations}
<<,cache=FALSE, eval=TRUE, echo=FALSE, message=FALSE, warning=FALSE, results="hide">>=
colnames(intraday_duke_pairs)<-gsub("\\^|\\$","",colnames(intraday_duke_pairs),fixed=FALSE)
colnames(duke_pairs)<-gsub("\\^|\\$","",colnames(duke_pairs),fixed=FALSE)

cms_intraday<-do.call(rbind,mapply(
  function(m){
    cm<-round(
      100*cor(intraday_duke_pairs[,grepl(paste0("^",m,"[0-9]+$"),colnames(intraday_duke_pairs))]),
      digits=0
    )
    u<-cm[col(cm)>row(cm)]
    i<-row(cm)[col(cm)>row(cm)]
    j<-col(cm)[col(cm)>row(cm)]
    data.table(
      pair_cor=structure(u,format=quote(sign_color(t=round(this,digits=2),s=this))),
      manager=m,
      pair1=rownames(cm)[i],
      pair2=colnames(cm)[j]
    )
  },
  sort(unique(duke_position_scrape$manager)),
  SIMPLIFY=FALSE
))[abs(pair_cor)>1e-3]

cms_daily<-do.call(rbind,mapply(
  function(m){
    cm<-round(
      100*cor(duke_pairs[,grepl(paste0("^",m,"[0-9]+$"),colnames(duke_pairs))]),
      digits=0
    )
    u<-cm[col(cm)>row(cm)]
    i<-row(cm)[col(cm)>row(cm)]
    j<-col(cm)[col(cm)>row(cm)]
    data.table(
      pair_cor=structure(u,format=quote(sign_color(t=round(this,digits=2),s=this))),
      manager=m,
      pair1=rownames(cm)[i],
      pair2=colnames(cm)[j]
    )
  },
  sort(unique(duke_position_scrape$manager)),
  SIMPLIFY=FALSE
))[abs(pair_cor)>1e-3]

cms<-rbind(
  data.table(cms_intraday,type="intraday"),
  data.table(cms_daily,type="daily")
)

intraday_cor_stats<-cms_intraday[,.(
    mean_cor=structure(mean(pair_cor),format=quote(sign_color(t=round(this,digits=2),s=this))),
    median_cor=structure(median(pair_cor),format=quote(sign_color(t=round(this,digits=2),s=this))),
    max_cor=structure(max(pair_cor),format=quote(sign_color(t=round(this,digits=2),s=this))),
    min_cor=structure(min(pair_cor),format=quote(sign_color(t=round(this,digits=2),s=this)))
),keyby=manager]

daily_cor_stats<-cms_daily[,.(
    mean_cor=structure(mean(pair_cor),format=quote(sign_color(t=round(this,digits=2),s=this))),
    median_cor=structure(median(pair_cor),format=quote(sign_color(t=round(this,digits=2),s=this))),
    max_cor=structure(max(pair_cor),format=quote(sign_color(t=round(this,digits=2),s=this))),
    min_cor=structure(min(pair_cor),format=quote(sign_color(t=round(this,digits=2),s=this)))
),keyby=manager]


g_cor<-ggplot(cms, aes(x=pair_cor,y=..density..,fill=type)) + 
  geom_histogram(bins=30,alpha=0.5, position="identity") +
  geom_vline(xintercept = 0) +
  facet_wrap( ~ manager, nrow = 2)


@


\begin{center}
\begin{tabular}{c c}
\Sexpr{ntable(
  df=intraday_cor_stats,
  title="Manager pair correlation statistics, 2 weeks, 10-min bars"
)}
&
\Sexpr{ntable(
  df=daily_cor_stats,
  title="Manager pair correlation statistics, 2 year, daily"
)}
\\
\end{tabular}
\end{center}

\vskip 5mm 

\begin{center}
\Sexpr{make_plot(plot(g_cor),width="20cm",height="20cm",envir=environment())}
\end{center}

\newpage
\section{Factor correlations}
<<,cache=FALSE, eval=TRUE, echo=FALSE, message=FALSE, warning=FALSE, results="hide">>=

cmf_intraday<-do.call(rbind,mapply(
  function(m){
    cm<-round(
      100*cor(bar_matrix[,factor_tickers],intraday_duke_pairs[,grepl(paste0("^",m,"[0-9]+$"),colnames(intraday_duke_pairs))]),
      digits=0
    )
    u<-cm[col(cm)>row(cm)]
    i<-row(cm)[col(cm)>row(cm)]
    j<-col(cm)[col(cm)>row(cm)]
    data.table(
      pair_cor=structure(u,format=quote(sign_color(t=this,s=this))),
      manager=m,
      factor=gsub(" Index","",rownames(cm))[i],
      pair=colnames(cm)[j]
    )
  },
  sort(unique(duke_position_scrape$manager)),
  SIMPLIFY=FALSE
))[abs(pair_cor)>1e-3]

cmf_daily<-do.call(rbind,mapply(
  function(m){
    cm<-round(
      100*cor(factor_local_tret,duke_pairs[,grepl(paste0("^",m,"[0-9]+$"),colnames(duke_pairs))]),
      digits=0
    )
    u<-cm[col(cm)>row(cm)]
    i<-row(cm)[col(cm)>row(cm)]
    j<-col(cm)[col(cm)>row(cm)]
    data.table(
      pair_cor=structure(u,format=quote(sign_color(t=this,s=this))),
      manager=m,
      factor=gsub(" Index","",rownames(cm))[i],
      pair=colnames(cm)[j]
    )
  },
  sort(unique(duke_position_scrape$manager)),
  SIMPLIFY=FALSE
))[abs(pair_cor)>1e-3]

cmf<-rbind(
  data.table(cmf_intraday,type="intraday"),
  data.table(cmf_daily,type="daily")
)

intraday_corf_stats<-cmf_intraday[,.(
    mean_cor=structure(mean(pair_cor),format=quote(sign_color(t=round(this,digits=2),s=this))),
    median_cor=structure(median(pair_cor),format=quote(sign_color(t=round(this,digits=2),s=this))),
    max_cor=structure(max(pair_cor),format=quote(sign_color(t=round(this,digits=2),s=this))),
    min_cor=structure(min(pair_cor),format=quote(sign_color(t=round(this,digits=2),s=this)))
),keyby=manager]

daily_corf_stats<-cmf_daily[,.(
    mean_cor=structure(mean(pair_cor),format=quote(sign_color(t=round(this,digits=2),s=this))),
    median_cor=structure(median(pair_cor),format=quote(sign_color(t=round(this,digits=2),s=this))),
    max_cor=structure(max(pair_cor),format=quote(sign_color(t=round(this,digits=2),s=this))),
    min_cor=structure(min(pair_cor),format=quote(sign_color(t=round(this,digits=2),s=this)))
),keyby=manager]


g_fcor<-ggplot(cmf, aes(x=pair_cor,y=..density..,fill=type)) + 
  geom_histogram(bins=30,alpha=0.5, position="identity") +
  geom_vline(xintercept = 0) +
  facet_wrap( ~ manager, nrow = 2)


@

\begin{center}
\begin{tabular}{c c}
\Sexpr{ntable(
  df=intraday_corf_stats,
  title="Manager pair correlation to factors, 2 weeks, 10-min bars"
)}
&
\Sexpr{ntable(
  df=daily_corf_stats,
  title="Manager pair correlation to factors, 2 year, daily"
)}
\\
\end{tabular}
\end{center}

\vskip 5mm 

\begin{center}
\Sexpr{make_plot(plot(g_fcor),width="20cm",height="20cm",envir=environment())}
\end{center}

\newpage
\section{High correlation pairs}

\vskip 5mm

\begin{center}
\begin{tabular}{c c}
\Sexpr{ntable(
  df=cms_intraday[head(order(-abs(pair_cor)),50)][order(-abs(pair_cor))],
  title="intraday"
)}
&
\Sexpr{ntable(
  df=cms_daily[head(order(-abs(pair_cor)),50)][order(-abs(pair_cor))],
  title="daily"
)}
\\
\end{tabular}
\end{center}

\newpage
\section{High factor exposure pairs}

\vskip 5mm

\begin{center}
\begin{tabular}{c c}
\Sexpr{ntable(
  df=cmf_intraday[head(order(-abs(pair_cor)),50)][order(-abs(pair_cor))],
  title="intraday"
)}
&
\Sexpr{ntable(
  df=cmf_daily[head(order(-abs(pair_cor)),50)][order(-abs(pair_cor))],
  title="daily"
)}
\\
\end{tabular}
\end{center}

\newpage
\section{High sector exposure pairs}
<<,cache=FALSE, eval=TRUE, echo=FALSE, message=FALSE, warning=FALSE, results="hide">>=
sector_tickers<-factor_tickers[grepl("^SX",factor_tickers)]

cmfs_intraday<-do.call(rbind,mapply(
  function(m){
    cm<-round(
      100*cor(bar_matrix[,sector_tickers],intraday_duke_pairs[,grepl(paste0("^",m,"[0-9]+$"),colnames(intraday_duke_pairs))]),
      digits=0
    )
    u<-cm[col(cm)>row(cm)]
    i<-row(cm)[col(cm)>row(cm)]
    j<-col(cm)[col(cm)>row(cm)]
    data.table(
      pair_cor=structure(u,format=quote(sign_color(t=this,s=this))),
      manager=m,
      sector=gsub(" Index","",rownames(cm))[i],
      pair=colnames(cm)[j]
    )
  },
  sort(unique(duke_position_scrape$manager)),
  SIMPLIFY=FALSE
))[abs(pair_cor)>1e-3]

cmfs_daily<-do.call(rbind,mapply(
  function(m){
    cm<-round(
      100*cor(factor_local_tret[,sector_tickers],duke_pairs[,grepl(paste0("^",m,"[0-9]+$"),colnames(duke_pairs))]),
      digits=0
    )
    u<-cm[col(cm)>row(cm)]
    i<-row(cm)[col(cm)>row(cm)]
    j<-col(cm)[col(cm)>row(cm)]
    data.table(
      pair_cor=structure(u,format=quote(sign_color(t=this,s=this))),
      manager=m,
      sector=gsub(" Index","",rownames(cm))[i],
      pair=colnames(cm)[j]
    )
  },
  sort(unique(duke_position_scrape$manager)),
  SIMPLIFY=FALSE
))[abs(pair_cor)>1e-3]

cmfs<-rbind(
  data.table(cmfs_intraday,type="intraday"),
  data.table(cmfs_daily,type="daily")
)

intraday_corfs_stats<-cmfs_intraday[,.(
    mean_cor=structure(mean(pair_cor),format=quote(sign_color(t=round(this,digits=2),s=this))),
    median_cor=structure(median(pair_cor),format=quote(sign_color(t=round(this,digits=2),s=this))),
    max_cor=structure(max(pair_cor),format=quote(sign_color(t=round(this,digits=2),s=this))),
    min_cor=structure(min(pair_cor),format=quote(sign_color(t=round(this,digits=2),s=this)))
),keyby=manager]

daily_corfs_stats<-cmfs_daily[,.(
    mean_cor=structure(mean(pair_cor),format=quote(sign_color(t=round(this,digits=2),s=this))),
    median_cor=structure(median(pair_cor),format=quote(sign_color(t=round(this,digits=2),s=this))),
    max_cor=structure(max(pair_cor),format=quote(sign_color(t=round(this,digits=2),s=this))),
    min_cor=structure(min(pair_cor),format=quote(sign_color(t=round(this,digits=2),s=this)))
),keyby=manager]


g_fscor<-ggplot(cmfs, aes(x=pair_cor,y=..density..,fill=type)) + 
  geom_histogram(bins=30,alpha=0.5, position="identity") +
  geom_vline(xintercept = 0) +
  facet_wrap( ~ manager, nrow = 2)


@

\vskip 5mm

\begin{center}
\begin{tabular}{c c}
\Sexpr{ntable(
  df=cmfs_intraday[head(order(-abs(pair_cor)),50)][order(-abs(pair_cor))],
  title="intraday"
)}
&
\Sexpr{ntable(
  df=cmfs_daily[head(order(-abs(pair_cor)),50)][order(-abs(pair_cor))],
  title="daily"
)}
\\
\end{tabular}
\end{center}

\newpage
\section{Pair long-short correlation}
<<,cache=FALSE, eval=TRUE, echo=FALSE, message=FALSE, warning=FALSE, results="hide">>=

long_pair_ptf<-do.call(cbind,mapply(
  function(the_pair)structure(cbind(
    duke_position_scrape[,.(exposure=sum(ifelse(grepl(paste0("^",the_pair,"$"),pair),pmax(exposure,0),0))),keyby=ticker][,exposure]
  ),dimnames=list(sort(unique(duke_position_scrape$ticker)),the_pair)),
  sort(unique(duke_position_scrape$pair)),
  SIMPLIFY=FALSE
))

intraday_long_pairs<-bar_matrix[,rownames(long_pair_ptf)]%*%long_pair_ptf
daily_long_pairs<-local_tret[,rownames(long_pair_ptf)]%*%long_pair_ptf
  
short_pair_ptf<-do.call(cbind,mapply(
  function(the_pair)structure(cbind(
    duke_position_scrape[,.(exposure=sum(ifelse(grepl(paste0("^",the_pair,"$"),pair),pmin(exposure,0),0))),keyby=ticker][,exposure]
  ),dimnames=list(sort(unique(duke_position_scrape$ticker)),the_pair)),
  sort(unique(duke_position_scrape$pair)),
  SIMPLIFY=FALSE
))

intraday_short_pairs<-bar_matrix[,rownames(short_pair_ptf)]%*%short_pair_ptf
daily_short_pairs<-local_tret[,rownames(short_pair_ptf)]%*%short_pair_ptf


intraday_pair_cor<-mapply(function(x,y){
  if(sd(x)<1e-10)return(0)
  if(sd(y)<1e-10)return(0)
  round(100*cor(x,y),digits=0)
},data.table(intraday_long_pairs),data.table(intraday_short_pairs))

daily_pair_cor<-mapply(function(x,y){
  if(sd(x)<1e-10)return(0)
  if(sd(y)<1e-10)return(0)
  round(100*cor(x,y),digits=0)
},data.table(daily_long_pairs),data.table(daily_short_pairs))

pair_cor_df<-data.table(
  pair=names(daily_pair_cor),
  perf=structure(
    colSums(intraday_duke_pairs)[names(daily_pair_cor)],
    format=quote(paste0("\\multicolumn{1}{r}{",sign_color(n_fmt(round(this,digits=1)),this),"}")),
    hdr=tbl(c("2week","pair","perf"))
  ),
  long_perf=structure(
    colSums(intraday_long_pairs)[names(daily_pair_cor)],
    format=quote(paste0("\\multicolumn{1}{r}{",sign_color(n_fmt(round(this,digits=1)),this),"}")),
    hdr=tbl(c("2week","long","perf"))
  ),
  short_perf=structure(
    colSums(intraday_short_pairs)[names(daily_pair_cor)],
    format=quote(paste0("\\multicolumn{1}{r}{",sign_color(n_fmt(round(this,digits=1)),this),"}")),
    hdr=tbl(c("2week","short","perf"))
  ),
  gross=duke_position_scrape[,.(gross=sum(abs(exposure))),keyby=pair][names(daily_pair_cor),gross],
  long=duke_position_scrape[,.(long=gsub("( Equity)|( Index)","",ticker[which.max(exposure)])),keyby=pair][names(daily_pair_cor),long],
  short=duke_position_scrape[,.(short=gsub("( Equity)|( Index)","",ticker[which.min(exposure)])),keyby=pair][names(daily_pair_cor),short],
  daily=structure(daily_pair_cor,format=quote(sign_color(t=this,s=this))),
  intraday=structure(intraday_pair_cor,format=quote(sign_color(t=this,s=this)))
)[order(abs(intraday))]


@

\begin{center}
\begin{tabular}{c c}
\Sexpr{ntable(
  df=pair_cor_df[order(abs(intraday))][,c(
    .SD,
    list(
      rank=structure(
        frank(abs(daily),ties.method="dense")-frank(abs(intraday),ties.method="dense"),
        format=quote(background_color(n_fmt(this),signed_ramp(this))),
        hdr=tbl(c("change","in","rank"))
      )
    )
  )],
  title=large_bold("ordered by intraday pair leg correlation, low to high"),
  scale="0.5"
)}
&
\Sexpr{ntable(
  df=pair_cor_df[order(abs(daily))][,c(
    .SD,
    list(
      rank=structure(
        frank(abs(intraday),ties.method="dense")-frank(abs(daily),ties.method="dense"),
        format=quote(background_color(n_fmt(this),signed_ramp(this))),
        hdr=tbl(c("change","in","rank"))
      )
    )
  )],
  title=large_bold("ordered daily pair leg correlation, low to high"),
  scale="0.5"
)}
\\
\end{tabular}
\end{center}


<<,cache=FALSE, eval=TRUE, echo=FALSE, message=FALSE, warning=FALSE, results="hide">>=

performance_image<-function(
  pair_pattern="*",
  txt_size=5,
  sort_pnl=TRUE,
  xform_fun=function(x)cumsum(x)
){
  
  m<-intraday_duke_pairs[duke_ticking,grepl(pair_pattern,colnames(intraday_duke_pairs))]
  xformed_m<-apply(m,2,xform_fun)
  pair_perf_rank<-setNames(frank(drop(tail(xformed_m,1)),ties.method="first"),colnames(m))
  
  x0<-data.table(
    tick=1:nrow(intraday_duke_pairs[duke_ticking,]),
    xformed_m
  ) 
  
  x1<- x0 %>% 
  {melt(data=.,id.vars="tick",measure.vars=colnames(xformed_m),variable.factor=FALSE)} 
  
  x<- x1 %>%
  {.[,.(
    tick=tick,
    variable=variable,
    value=value,
    pair=if(sort_pnl){
        factor(variable,levels=names(pair_perf_rank)[order(pair_perf_rank)])
      }else{
        factor(variable)
      }
  )]}
  
  g_perf<-x %>% ggplot()+
    geom_raster(aes(x=tick,y=pair,fill=value))+
    scale_fill_gradient2(
      low = "red", #muted("red"), 
      mid = "white",
      high = "green", #muted("green"), 
      midpoint = 0, 
      space = "Lab",
      na.value = "grey50", 
      guide = "colourbar", 
      aesthetics = "fill"
    ) + 
    theme(axis.text.y = element_text(size = txt_size))
  
  g_perf
  
}

@



<<,cache=FALSE, eval=TRUE, echo=FALSE, message=FALSE, warning=FALSE, results="hide">>=

duke_ticking<-which(apply(intraday_duke,1,sd)>1e-10)

pair_ptf<-mapply(
  function(the_pair)structure(cbind(
    duke_position_scrape[,.(exposure=sum(ifelse(grepl(paste0("^",the_pair,"$"),pair),exposure,0))),keyby=ticker][,exposure]
  ),dimnames=list(sort(unique(duke_position_scrape$ticker)),the_pair)),
  sort(unique(duke_position_scrape$pair))
)

long_pair_ptf<-pmax(pair_ptf,0)
short_pair_ptf<-pmin(pair_ptf,0)


duke_pairs<-local_tret%*%pair_ptf
intraday_duke_pairs<-bar_matrix[,all_tickers]%*%pair_ptf
long_intraday_duke_pairs<-bar_matrix[,all_tickers]%*%long_pair_ptf
short_intraday_duke_pairs<-bar_matrix[,all_tickers]%*%short_pair_ptf


total_gross <- sum(abs(duke_position_scrape$exposure))

manager_gross<-duke_position_scrape[,.(
  pair_count=length(unique(pair)),
  gross=sum(abs(exposure)),
  gross_fraction=sum(abs(exposure))/total_gross
),keyby=manager][,.SD,keyby=manager]

pair_vols<-do.call(rbind,mapply(function(n){
  vol<-do.call(data.table,as.list(16*apply(tail(duke_pairs,n),2,sd)))
  data.table(days=n,vol)
},n=floor(seq(from=365,to=30,length.out=20)),SIMPLIFY=FALSE))%>%
{melt(.,id.vars="days",measure.vars=colnames(duke_pairs))}


pair_rp<-duke_position_scrape[,.(
  manager=manager[1],
  actual_pair_gross=sum(abs(exposure)),
  manager_gross=manager_gross[manager,gross][1],
  unit_daily_sd=sd(duke_pairs[,pair])/sum(abs(exposure)),
  unit_intraday_sd=sd(intraday_duke_pairs[,pair])/sum(abs(exposure))
),keyby=pair][,c(
  .SD,
  list(
    daily_rp_gross_ratio=manager_gross*(1/unit_daily_sd)/sum(1/unit_daily_sd)/actual_pair_gross,
    intraday_rp_gross_ratio=manager_gross*(1/unit_intraday_sd)/sum(1/unit_intraday_sd)/actual_pair_gross
  )
),keyby=manager][,c(
  .SD,
  list(
    daily_conviction=structure(
      1/daily_rp_gross_ratio,
      hdr=tbl(c("1day","conv")),
      format=quote(round(this,digits=2))
    ),
    intraday_conviction=structure(
      1/intraday_rp_gross_ratio,
      hdr=tbl(c("10min","conv")),
      format=quote(round(this,digits=2))
    ),
    vol30=structure(
      pair_vols[days==30][,.SD,keyby=variable][pair,value],
      hdr=tbl(c("30d","vol")),
      format=quote(round(this,digits=1))
    ),
    vol365=structure(
      pair_vols[days==365][,.SD,keyby=variable][pair,value],
      hdr=tbl(c("365d","vol")),
      format=quote(round(this,digits=1))
    )
  )
)]


@



\newpage
\section{DUKE performance image: P\&L ordered by pair name}

\begin{center}
\Sexpr{make_plot(
  plot(performance_image("*",sort_pnl=FALSE)),
  width="20cm",
  height="26cm",
  envir=environment()
)}
\end{center}

\newpage
\section{DUKE performance image: by P\&L}

\begin{center}
\Sexpr{make_plot(
  plot(performance_image("*",sort_pnl=TRUE)),
  width="20cm",
  height="26cm",
  envir=environment()
)}
\end{center}


\newpage
\section{DUKE performance image: Cummulative hit-ratio}

\begin{center}
\Sexpr{make_plot(
  plot(performance_image("*",sort_pnl=FALSE,xform_fun=function(x)100*cumsum(sign(x))/length(x))),
  width="20cm",
  height="26cm",
  envir=environment()
)}
\end{center}

\newpage
\section{DUKE performance image: Cummulative hit-ratio, sorted}

\begin{center}
\Sexpr{make_plot(
  plot(performance_image("*",sort_pnl=TRUE,xform_fun=function(x)100*cumsum(sign(x))/length(x))),
  width="20cm",
  height="26cm",
  envir=environment()
)}
\end{center}

<<,cache=FALSE, eval=TRUE, echo=FALSE, message=FALSE, warning=FALSE, results="hide">>=



make_manager_page<-function(m){
  res<-paste0(
    "\\newpage",
    paste0("\\section{",m," performance image}"),
    "\\begin{center}",
    "\\begin{tabular}{m{10cm} m{10cm}}",
    "\\hline",
    "\\rowcolor{gray!20}",
    "Cummulative P\\&L (bps) & Cummulative hit ratio (pct) \\\\",
    make_plot(
      plot(performance_image(paste0("^",m,"[0-9]+$"),txt_size=10)),
      width="10cm",
      height="10cm",
      envir=environment()
    ),
    " & ",
    make_plot(
      plot(performance_image(paste0("^",m,"[0-9]+$"),txt_size=10,xform_fun=function(x)100*cumsum(sign(x))/length(x))),
      width="10cm",
      height="10cm",
      envir=environment()
    ),
    " \\\\ ",
    "\\hline",
    "\\rowcolor{gray!20}",
    "Conviction ratios & Historical vols \\\\",
    ntable(
      df=pair_rp[manager==m,.(pair,daily_conviction,intraday_conviction,vol30,vol365)][order(-daily_conviction)]
    ),
    " & ",
    make_plot(
      plot(
        pair_vols[grepl(paste0("^",m,"[0-9]+$"),variable)] %>% 
        ggplot() +
        geom_line(aes(x=days,y=value,col=variable),size=2)
      ),
      width="10cm",
      height="10cm",
      envir=environment()
    ),
    "  \\\\ ",
    "\\end{tabular}",
    "\\end{center}",
    collapse="\n"
  )
  res
}

all_managers<-sort(unique(duke_position_scrape$manager))

all_manager_pages<-paste(mapply(make_manager_page,m=all_managers),collapse="\n\n\n")


@

\Sexpr{all_manager_pages}


<<, cache=FALSE, eval=TRUE, echo=FALSE, message=FALSE, warning=FALSE, results="hide">>=
  
require(RSQLite)
require(DBI)
require(Matrix)
require(Matrix.utils)
require(Rblpapi)
require(R.cache)
require(RcppRoll)
require(data.table)
require(Hmisc)
require(clue)
require(gsubfn)
require(magrittr)

# x<-list.files(
#   path="figure",
#   pattern="*.pdf",
#   full.names=TRUE
# )
# if(length(x)>0)file.remove(x)

source(
  "https://raw.githubusercontent.com/satrapade/utility/master/utility_functions.R"
)

source(
  "https://raw.githubusercontent.com/satrapade/latex_utils/master/latex_helpers_v2.R"
)

source(
  "https://raw.githubusercontent.com/satrapade/utility/master/scrub.R"
)

source(
  "https://raw.githubusercontent.com/satrapade/utility/master/with_columns.R"
)

source(
  "https://raw.githubusercontent.com/satrapade/utility/master/nn_cast.R"
)

source(
  "https://raw.githubusercontent.com/satrapade/utility/master/make_query.R"
)




if(exists("db"))dbDisconnect(db)
db<-dbConnect(
  odbc::odbc(), 
  .connection_string = paste0(
    "driver={SQL Server};",
    "server=SQLS071FP\\QST;",
    "database=PRDQSTFundPerformance;",
    "trusted_connection=true"
  )
)


query_string="
SELECT 
tBucket.Name AS bucket,
SUBSTRING(CONVERT(varchar,tHistoricalBucket.HistoricalDate),1,10) AS date,
tHistoricalBucket.BucketPricePlItd AS cummulative_return
FROM tHistoricalBucket
LEFT JOIN tBucket
ON tBucket.BucketId = tHistoricalBucket.BucketId
LEFT JOIN tBucket AS tParentBucket 
ON tParentBucket.BucketId=tBucket.ParentBucketId
LEFT JOIN tBucket AS tRootBucket 
ON tRootBucket.BucketId=tParentBucket.ParentBucketId
WHERE tRootBucket.Name = 'EqyBucket'
AND tHistoricalBucket.ProductId=--R{product_id}--
AND tHistoricalBucket.DataSourceId=--R{data_source_id}--
"


query_historical_holdings_string="
SELECT 
tBucket.Name AS bucket,
SUBSTRING(CONVERT(varchar,tHistoricalBucketHolding.HistoricalDate),1,10) AS date,
tSecurity.Ticker AS security_ticker,
tUnderlyingSecurity.Ticker AS underlying_security_ticker,
tSecurityType.Name AS security_type,
tUnderlyingSecurityType.Name AS underlying_security_type
FROM tHistoricalBucketHolding
LEFT JOIN tBucket
ON tBucket.BucketId = tHistoricalBucketHolding.BucketId
LEFT JOIN tBucket AS tParentBucket 
ON tParentBucket.BucketId=tBucket.ParentBucketId
LEFT JOIN tBucket AS tRootBucket 
ON tRootBucket.BucketId=tParentBucket.ParentBucketId
LEFT JOIN tSecurity 
ON tSecurity.SecurityId = tHistoricalBucketHolding.SecurityId
LEFT JOIN tSecurityType 
ON tSecurityType.SecurityTypeId = tSecurity.SecurityTypeId
LEFT JOIN tSecurity AS tUnderlyingSecurity
ON tUnderlyingSecurity.SecurityId = tSecurity.UnderlyingSecurityId
LEFT JOIN tSecurityType AS tUnderlyingSecurityType
ON tUnderlyingSecurityType.SecurityTypeId = tUnderlyingSecurity.SecurityTypeId
WHERE tRootBucket.Name = 'EqyBucket'
AND tHistoricalBucketHolding.ProductId=--R{product_id}--
AND tHistoricalBucketHolding.DataSourceId=--R{data_source_id}--
"





@




<<, cache=FALSE, eval=TRUE, echo=FALSE, message=FALSE, warning=FALSE, results="hide">>=

#
# DUKE
#

duke_bucket_holdings<-query(make_query(
  query_string = query_historical_holdings_string,
  product_id="8",
  data_source_id="2"
),db=db)[grepl("[A-Z]{2,3}_PAIR_[0-9]{2,9}",bucket)]

ticker_count<-duke_bucket_holdings[,.(
  manager=gsub("_PAIR_[0-9]+$","",bucket),
  ticker=ifelse(
    !security_type %in% c("Equity Swap","Equity Etd"),
    "other",
    ifelse(security_type=="Equity Swap",underlying_security_ticker,security_ticker)
  )
)][,.(ticker=unique(ticker)),keyby="manager"]

duke_bucket_return<-query(make_query(
  query_string = query_string,
  product_id="8",
  data_source_id="2"
),db=db)[
  grepl("[A-Z]{2,3}_PAIR_[0-9]{2,9}",bucket) &
  !is.na(cummulative_return)
]

duke_bucket_return_matrix<-10000*NNcast(
  data=duke_bucket_return,
  i_name="date",
  j_name="bucket",
  v_name="cummulative_return",
  fun=sum,
  scrub_fun=scrub
)

duke_high_water_mark<-apply(duke_bucket_return_matrix,2,max)
duke_current_drawdown<-apply(duke_bucket_return_matrix,2,function(x)max(x)-x[length(x)])
duke_max_drawdown<-apply(duke_bucket_return_matrix,2,function(x)max(cummax(x)-x))

duke_pair_pms<-gsub("_PAIR_[0-9]+$","",colnames(duke_bucket_return_matrix))
duke_pms<-sort(unique(duke_pair_pms))

duke_pm_return<-structure(
  duke_bucket_return_matrix%*%diag(length(duke_pms))[match(duke_pair_pms,duke_pms),],
  dimnames=list(rownames(duke_bucket_return_matrix),duke_pms)
)

duke_pm_high_water_mark<-apply(duke_pm_return,2,max)
duke_pm_current_drawdown<-apply(duke_pm_return,2,function(x)max(x)-x[length(x)])
duke_pm_max_drawdown<-apply(duke_pm_return,2,function(x)max(cummax(x)-x))

gg_duke_pm_plot<-melt(
  data.table(date=as.Date(rownames(duke_pm_return),format="%Y-%m-%d"),duke_pm_return),
  id.vars="date",
  measure.vars = colnames(duke_pm_return),
  variable.name="pm",
  value.name="return"
) %>% ggplot() +
geom_line(
  aes(x=date,y=return,color=pm,group=pm)
)+
scale_x_date(
  labels = date_format("%Y-%m-%d"),
  breaks = pretty(as.Date(rownames(duke_pm_return),format="%Y-%m-%d"), n = 15)
) +
labs(y = "P&L, basis points") +
labs(x = "") +
theme(
  axis.text.x=element_text(angle=50,size=6,vjust=0.5)
)


@



\newpage
\section{Data sources}

\vskip 5mm

\begin{itemize}
\item We rely on the performance attribution database to obtain pair P\&L time-series. 
\item The allocation of positions (and P\&L) to pairs is a daily manual process that 
relies on a feed of settled trades from our custodian. 
\item This means that our information is out of date by at least the settlement period
(best practice would be to have exposures on the day they were traded). 
\item Because coverage at the performance team varies, our numbers can be out of date 
beyond the settlement lag. 
\item A standard portfolio management system would bring this process up to current best practice.
\end{itemize}

\vskip 10mm

\begin{center}
\begin{tabular}{l l}
\hline
\multicolumn{2}{c}{Latest bucket P\&L date} \\
LUKE  &  
\Sexpr{query("SELECT MAX(HistoricalDate) FROM tHistoricalBucket WHERE tHistoricalBucket.ProductId=7")[[1]][1]}
\\
DUKE  &  
\Sexpr{query("SELECT MAX(HistoricalDate) FROM tHistoricalBucket WHERE tHistoricalBucket.ProductId=8")[[1]][1]}
\\
\end{tabular}
\end{center}

\vskip 5mm

\begin{center}
\Sexpr{ntable(
  df=apply(as.data.table(
    t(query("
    select Top 1        
    bs.backup_finish_date                    as PRDFundPerformance_BackupDateTime,
    rs.restore_date                          as PRDQSTFundPerformance_RestoreDateTime
    from msdb..restorehistory rs
    inner join msdb..backupset bs 
    on rs.backup_set_id = bs.backup_set_id
    where destination_database_name = 'PRDQSTFundPerformance'
    order by rs.restore_date desc
    ",db)),
    keep.rownames=TRUE
  ),2,latexTranslate),
  title="Database copy date"
)}
\end{center}


<<, cache=FALSE, eval=TRUE, echo=FALSE, message=FALSE, warning=FALSE, results="hide">>=
duke_live_pairs<-setdiff(names(which(apply(tail(duke_bucket_return_matrix,30),2,sd)>0)),"DH_PAIR_20")
duke_live_drawdowns<-duke_current_drawdown[duke_live_pairs]
duke_top_drawdowns<-names(which(rank(-duke_live_drawdowns)<11))
  
gg_duke_drawdown_plot<-melt(
  data.table(
    date=tail(as.Date(rownames(duke_bucket_return_matrix[,duke_top_drawdowns]),format="%Y-%m-%d"),60),
    tail(apply(duke_bucket_return_matrix[,duke_top_drawdowns],2,function(x)max(x)-x),60)
  ),
  id.vars="date",
  measure.vars = duke_top_drawdowns,
  variable.name="pair",
  value.name="return"
) %>% ggplot() +
ylim(
  low=0,
  high=50
)+
geom_hline(
    aes(yintercept=40),size=0.25,color=rgb(1,0,0,0.5),show.legend=FALSE
)+ 
geom_line(
  aes(x=date,y=return,group=pair),
  color=rgb(0,0,1,0.5)
)+
scale_x_date(
  labels = date_format("%Y-%m-%d"),
  breaks = pretty(as.Date(tail(rownames(duke_bucket_return_matrix),60),format="%Y-%m-%d"), n = 15)
) +
labs(
  y = "Drawdown from high watermark, basis points"
) +
labs(
  x = ""
) +
theme(
  axis.text.x=element_text(angle=50,size=6,vjust=0.5)
) + 
facet_grid(
  rows=vars(pair),
  labeller=labeller(pair=function(x)gsub("_PAIR_","",x))
)

@
\newpage
\section{top DUKE drawdowns, as of \Sexpr{ tail(rownames(duke_bucket_return_matrix),1)}}

\vskip 5mm

\begin{center}
\Sexpr{make_plot(
  plot(gg_duke_drawdown_plot),
  width="20cm",
  height="20cm",
  envir=environment()
)}
\end{center}

\newpage
\section{
  Historical DUKE performance by manager: 
  \Sexpr{head(rownames(duke_bucket_return_matrix),1)} to \Sexpr{tail(rownames(duke_bucket_return_matrix),1)} 
}

\subsection{DUKE: All together}

\vskip 5mm

\begin{center}
\Sexpr{make_plot(
  plot(gg_duke_pm_plot),
  width="20cm",
  height="20cm",
  envir=environment()
)}
\end{center}

\subsection{DUKE: By manager}

\vskip 5mm

\begin{center}
\Sexpr{make_plot(
  plot(gg_duke_pm_plot + facet_grid(rows=vars(pm))),
  width="20cm",
  height="20cm",
  envir=environment()
)}
\end{center}


<<, cache=FALSE, eval=TRUE, echo=FALSE, message=FALSE, warning=FALSE, results="hide">>=
if(exists("db"))dbDisconnect(db)
@

\end{document}
